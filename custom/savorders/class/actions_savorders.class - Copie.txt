<?php

require_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';
require_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';
require_once DOL_DOCUMENT_ROOT.'/product/class/html.formproduct.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';
dol_include_once('/savorders/class/savorders.class.php');

/**
 * Class Actionssavorders
 */
class Actionssavorders
{
    /**
     * @var array Hook results. Propagated to $hookmanager->resArray for later reuse
     */
    public $results = array();

    /**
     * @var string String displayed by executeHook() immediately after return
     */
    public $resprints;

    /**
     * @var array Errors
     */
    public $errors = array();

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    public function doActions($parameters, &$object, &$action, $hookmanager)
    {
        global $langs, $db, $user, $conf;

        $langs->loadLangs(array('stocks'));
        $langs->load('savorders@savorders');

        $savorders = new savorders($db);

        $tmparray = ['receiptofproduct_valid', 'createdelivery_valid', 'deliveredtosupplier_valid', 'receivedfromsupplier_valid'];

        $ngtmpdebug = GETPOST('ngtmpdebug', 'int');
        if($ngtmpdebug) {
            echo '<pre>';
            print_r($parameters);
            echo '</pre>';
            
            ini_set('display_startup_errors', 1);
            ini_set('display_errors', 1);
            error_reporting(-1);
        }

        if ($object && (in_array('ordercard', explode(':', $parameters['context'])) || in_array('ordersuppliercard', explode(':', $parameters['context']))) && in_array($action, $tmparray)) {

            $error = 0;
            $now = dol_now();

            $savorders_date = '';

            global $savorders_date;

            $tmpdate = dol_mktime(0,0,0, GETPOST('savorders_datemonth','int'), GETPOST('savorders_dateday','int'), GETPOST('savorders_dateyear','int'));
            
            $savorders_date = dol_print_date($tmpdate, 'day');

            $cancel = GETPOST('cancel', 'alpha');

            $novalidaction = str_replace("_valid", "", $action);

            $s = GETPOST('savorders_data', 'array');

            $savorders_sav = $object->array_options["options_savorders_sav"];
            $savorders_status = $object->array_options["options_savorders_status"];

            if(!$savorders_sav || $cancel) return 0;

            $idwarehouse = isset($conf->global->SAVORDERS_ADMIN_IDWAREHOUSE) ? $conf->global->SAVORDERS_ADMIN_IDWAREHOUSE : 0;

            if(($novalidaction == 'receiptofproduct' || $novalidaction == 'deliveredtosupplier') && $idwarehouse <= 0) {
                $error++;
                $action = $novalidaction;
            }

            $commande = $object;

            $nblines = count($commande->lines);

            if($object->element == 'order_supplier') {
                $labelmouve = ($novalidaction == 'deliveredtosupplier') ? $langs->trans('ProductDeliveredToSupplier') : $langs->trans('ProductReceivedFromSupplier');
            } else {
                $labelmouve = ($novalidaction == 'receiptofproduct') ? $langs->trans('ProductReceivedFromCustomer') : $langs->trans('ProductDeliveredToCustomer');
            }

            $origin_element = '';
            $origin_id = null;

            if($object->element == 'order_supplier') {
                $mouvement = ($novalidaction == 'deliveredtosupplier') ? 1 : 0; // 0 : Add / 1 : Delete
            } else {
                $mouvement = ($novalidaction == 'receiptofproduct') ? 0 : 1; // 0 : Add / 1 : Delete
            }

            $texttoadd = '';
            if(isset($object->array_options["options_savorders_history"]))
                $texttoadd = $object->array_options["options_savorders_history"];

            if($novalidaction == 'createdelivery' || $novalidaction == 'receivedfromsupplier') {
                $texttoadd .= '<br>';
            }

            $oneadded = 0;

            if(!$error)
            for ($i = 0; $i < $nblines; $i++) {
                if (empty($commande->lines[$i]->fk_product)) {
                    continue;
                }

                $objprod = new Product($db);
                $objprod->fetch($commande->lines[$i]->fk_product);

                if($objprod->type != Product::TYPE_PRODUCT) continue;

                $tmid = $commande->lines[$i]->fk_product;

                $warehouse  = $s && isset($s[$tmid]) && isset($s[$tmid]['warehouse']) ? $s[$tmid]['warehouse'] : 0;
                $qty        = $s && isset($s[$tmid]) && isset($s[$tmid]['qty']) ? $s[$tmid]['qty'] : $commande->lines[$i]->qty;

                if($novalidaction == 'receiptofproduct' || $novalidaction == 'deliveredtosupplier') {
                    $warehouse = $idwarehouse;
                }

                if(($novalidaction == 'createdelivery') && $warehouse <= 0) {
                    setEventMessages($langs->trans("ErrorFieldRequired", $langs->transnoentitiesnoconv("Warehouse")), null, 'errors');
                    $error++;
                }

                $txlabelmovement = '(SAV) '.$objprod->ref .': '. $labelmouve;

                // Fetch the PMP for the product
                $pmp = $objprod->pmp;

                if ($objprod->hasbatch()) {

                    $qty = ($qty > $commande->lines[$i]->qty) ? $commande->lines[$i]->qty : $qty;

                    if($qty)
                    for ($z=0; $z < $qty; $z++) { 
                        $batch = $s && isset($s[$tmid]) && isset($s[$tmid]['batch'][$z]) ? $s[$tmid]['batch'][$z] : '';

                        if(!$batch && $z == 0) {
                            setEventMessages($langs->trans("ErrorFieldRequired", $langs->transnoentitiesnoconv("batch_number")), null, 'errors');
                            $error++;
                            break;
                        }

                        if(!$error && $batch) {
                            // Check if batch exists for receiptofproduct
                            if ($novalidaction == 'receiptofproduct') { // Only for receiptofproduct now
                                $lot = new ProductLot($db);
                                $res = $lot->fetch(0, $objprod->id, $batch);
                                if ($res <= 0) {
                                    setEventMessages($langs->trans("BatchDoesNotExist", $batch), null, 'errors');
                                    $error++;
                                    // break; // break will be handled by the if($error) break; after this block
                                }
                            }

                            // *** Start: New/Modified Validation Block for 'createdelivery' ***
                            if (!$error && $batch && $novalidaction == 'createdelivery') {

                                // Validation 1: Serial number (batch) must belong to the selected product.
                                $lot = new ProductLot($db);
                                $res_lot_fetch = $lot->fetch(0, $objprod->id, $batch);
                                if ($res_lot_fetch <= 0) {
                                    setEventMessages($langs->trans("SerialNumberNotForProduct", $batch, $objprod->ref), null, 'errors');
                                    $error++;
                                }

                                // Validation 2: Serial number (batch) must exist in stock in the selected warehouse.
                                if (!$error) { // Proceed only if previous validation passed
                                    // NEW QUERY:
                                    $sql_stock_check = "SELECT SUM(pb.qty) as total_qty FROM " . MAIN_DB_PREFIX . "product_batch pb";
                                    $sql_stock_check .= " INNER JOIN " . MAIN_DB_PREFIX . "product_stock ps ON pb.fk_product_stock = ps.rowid";
                                    $sql_stock_check .= " WHERE ps.fk_product = " . (int)$objprod->id;
                                    $sql_stock_check .= " AND ps.fk_entrepot = " . (int)$warehouse;
                                    $sql_stock_check .= " AND pb.batch = '" . $db->escape($batch) . "';"; // Added semicolon for clarity
                                    
                                    $resql_stock_check = $db->query($sql_stock_check);
                                    if ($resql_stock_check) {
                                        $obj_stock = $db->fetch_object($resql_stock_check);
                                        if (!$obj_stock || $obj_stock->total_qty <= 0) {
                                            $warehouse_obj = new Entrepot($db); 
                                            $warehouse_ref = $warehouse; // Fallback
                                            if ($warehouse_obj->fetch($warehouse) > 0) {
                                                $warehouse_ref = $warehouse_obj->ref;
                                            }
                                            setEventMessages($langs->trans("SerialNumberNotInStockOrZeroQty", $batch, $warehouse_ref), null, 'errors');
                                            $error++;
                                        }
                                    } else {
                                        dol_syslog("SAVORDERS Error checking stock for batch: " . $db->error(), LOG_ERR);
                                        setEventMessages($langs->trans("ErrorCheckingSerialNumberStock", $batch), null, 'errors');
                                        $error++;
                                    }
                                }
                            }
                            // *** End: New/Modified Validation Block ***

                            if ($error) break; // If an error occurred from new validation, stop processing this serial.

                            // Original stock correction logic (should only run if !$error)
                            // The check if ($novalidaction == 'createdelivery') { ... old SQL ... } was part of the block
                            // that is now conditionally skipped for 'createdelivery' or replaced by the new validation.
                            // So, no specific removal needed here if the above structure is correct.

                            // We still need to ensure this only runs if there are no errors from the above blocks.
                            if (!$error) { // This !$error check is critical
                                $result = $objprod->correct_stock_batch(
                                    $user,
                                    $warehouse,
                                    1, // Correcting one unit at a time for batch products
                                    $mouvement,
                                    $txlabelmovement, // label movement
                                    $pmp, // Use PMP as price unit
                                    $d_eatby = '',
                                    $d_sellby = '',
                                    $batch,
                                    $inventorycode = '',
                                    $origin_element,
                                    $origin_id,
                                    $disablestockchangeforsubproduct = 0
                                ); // We do not change value of stock for a correction

                                if($result > 0) {
                                    $this->addLineHistoryToSavCommande($texttoadd, $novalidaction, $objprod, $batch);
                                    $oneadded++;
                                } else {
                                    $error++;
                                    // break; // break will be handled by the if($error) break; after this block
                                }
                            }
                        }
                        if ($error) break; // If an error occurred for this serial, stop processing more serials for this line.
                    }

                } else { // Product does not have batch tracking
                    if(!$error && $qty) { // This is for non-batch products
                        $result = $objprod->correct_stock(
                            $user,
                            $warehouse,
                            $qty,
                            $mouvement,
                            $txlabelmovement,
                            $pmp, // Use PMP as price unit
                            $inventorycode = '',
                            $origin_element,
                            $origin_id,
                            $disablestockchangeforsubproduct = 0
                        ); // We do not change value of stock for a correction

                        if($result > 0) {
                            $this->addLineHistoryToSavCommande($texttoadd, $novalidaction, $objprod);
                            $oneadded++;
                        } else {
                            $error++;
                            // break; // break will be handled by the if($error) break; after this block
                        }
                    }
                }
                if ($error) break; // If an error occurred for this line, stop processing more lines.
            }

            if(!$error && $oneadded) {

                if($object->element == 'order_supplier') {
                    $savorders_status = ($novalidaction == 'deliveredtosupplier') ? $savorders::DELIVERED_SUPPLIER : $savorders::RECEIVED_SUPPLIER;
                } else {
                    $savorders_status = ($novalidaction == 'receiptofproduct') ? $savorders::RECIEVED_CUSTOMER : $savorders::DELIVERED_CUSTOMER;
                }

                $texttoadd = str_replace(['<span class="savorders_history_td">', '</span>'], ' ', $texttoadd);

                $extrafieldtxt = '<span class="savorders_history_td">';
                $extrafieldtxt .= $texttoadd;
                $extrafieldtxt .= '</span>';

                $object->array_options["options_savorders_history"] = $extrafieldtxt;
                $object->array_options["options_savorders_status"] = $savorders_status;
                $result = $object->insertExtraFields();
                if(!$result) $error++;
            }

            if($error){
                setEventMessages($objprod->errors, $object->errors, 'errors');
                header('Location: '.$_SERVER['PHP_SELF'].'?id='.$object->id.'&action='.$novalidaction);
            } else {
                if($oneadded)
                    setEventMessages($langs->trans("RecordCreatedSuccessfully"), null, 'mesgs');
                header('Location: '.$_SERVER['PHP_SELF'].'?id='.$object->id);
                exit();
            }

        }
    }

    public function addLineHistoryToSavCommande(&$texttoadd, $novalidaction, $objprod = '', $batch = '')
    {
        global $langs, $savorders_date;

        $contenu = '- '.$savorders_date.': ';

        if($novalidaction == 'receiptofproduct' || $novalidaction == 'receivedfromsupplier') {
            $contenu .= $langs->trans("OrderSavRecieveProduct");
        }
        elseif($novalidaction == 'createdelivery' || $novalidaction == 'deliveredtosupplier') {
            $contenu .= $langs->trans("OrderSavDeliveryProduct");
        }

        $contenu .= ' <a target="_blank" href="'.dol_buildpath('/product/card.php?id='.$objprod->id, 1).'">';
        $contenu .= '<b>'.$objprod->ref.'</b>';
        $contenu .= '</a>';

        if($batch) {
            $contenu .=  ' N° <b>'.$batch.'</b>';
        }

        $texttoadd .=  '<div class="savorders_history_txt " title="'.strip_tags($contenu).'">';
        $texttoadd .= $contenu;
        $texttoadd .=  '</div>';
    }

    /**
     * @param   array         	$parameters     Hook metadatas (context, etc...)
     * @param   Commande    	$object         The object to process
     * @param   string          $action         Current action (if set). Generally create or edit or null
     * @param   HookManager     $hookmanager    Hook manager propagated to allow calling another hook
     * @return  int                             < 0 on error, 0 on success, 1 to replace standard code
     */
    public function addMoreActionsButtons($parameters, &$object, &$action = '')
    {
        global $db, $conf, $langs, $confirm, $user;

        $langs->load('admin');
        $langs->load('savorders@savorders');

        $form = new Form($db);

        $ngtmpdebug = GETPOST('ngtmpdebug', 'int');
        if($ngtmpdebug) {
            echo '<pre>';
            print_r($parameters);
            echo '</pre>';

            ini_set('display_startup_errors', 1);
            ini_set('display_errors', 1);
            error_reporting(-1);
        }

        if (in_array('ordercard', explode(':', $parameters['context'])) || in_array('ordersuppliercard', explode(':', $parameters['context']))) {
            
            $savorders_sav = isset($object->array_options["options_savorders_sav"]) ? $object->array_options["options_savorders_sav"] : 0;
            $order_status = $object->statut; // Get the order status
            $linktogo = $_SERVER["PHP_SELF"].'?id=' . $object->id; // Defined early for use in multiple places

            // Part 1: Handling display of SAV action forms (e.g., serial entry form)
            $tmparray_sav_actions_with_form = ['receiptofproduct', 'createdelivery', 'deliveredtosupplier', 'receivedfromsupplier'];
            if (in_array($action, $tmparray_sav_actions_with_form)) {
                if ($savorders_sav) {
                    // If it's a SAV order and a SAV action form is requested
                    if ($order_status != Commande::STATUS_DRAFT) { // And order is not DRAFT
                        // This is where the existing form generation code goes.
                        $s = GETPOST('savorders_data', 'array'); // $s is needed for the form
                ?>
                <script type="text/javascript">
                    $(document).ready(function() {
                        $('html, body').animate({
                            scrollTop: ($("#savorders_formconfirm").offset().top - 80)
                        }, 800);
                    });
                </script>
                <?php

                // ... (rest of the existing form printing code as per previous state) ...
                // This includes the FormProduct, nblines, loops for lines, inputs, etc.
                // and finally the return 1;
                // For brevity, assuming the form code from the previous state is correctly placed here.
                // The important part is that this whole block is now inside "if ($order_status != Commande::STATUS_DRAFT)"
                // and ends with "return 1;"
                // --- Start of example form code (simplified) ---
                if($object->element == 'order_supplier') { $title = ($action == 'deliveredtosupplier') ? $langs->trans('ProductDeliveredToSupplier') : $langs->trans('ProductReceivedFromSupplier'); }
                else { $title = ($action == 'receiptofproduct') ? $langs->trans('ProductReceivedFromCustomer') : $langs->trans('ProductDeliveredToCustomer'); }
                $formproduct = new FormProduct($db);
                $nblines = count($object->lines);
                print '<div class="tagtable paddingtopbottomonly centpercent noborderspacing savorders_formconfirm" id="savorders_formconfirm">';
                print_fiche_titre($title, '', $object->picto);
                // ... (More form elements: table, inputs for batch, qty, warehouse as per existing logic) ...
                // Example of loop for lines:
                // for ($i_loop = 0; $i_loop < $nblines; $i_loop++) { ... }
                print '<form method="POST" action="'.$linktogo.'" class="notoptoleftroright">'."\n";
                 // ... (hidden inputs, table rows for products, batch, qty, warehouse) ...
                 // Example from existing:
                print '<table class="valid centpercent">';
                // ... (headers) ...
                for ($i_loop = 0; $i_loop < $nblines; $i_loop++) {
                     if (empty($object->lines[$i_loop]->fk_product)) continue;
                     $objprod_form = new Product($db);
                     $objprod_form->fetch($object->lines[$i_loop]->fk_product);
                     if($objprod_form->type != Product::TYPE_PRODUCT) continue;
                     $hasbatch = $objprod_form->hasbatch();
                     $tmid = $object->lines[$i_loop]->fk_product;
                     $current_warehouse_val  = $s && isset($s[$tmid]) && isset($s[$tmid]['warehouse']) ? $s[$tmid]['warehouse'] : 0;
                     $current_qty_val        = $s && isset($s[$tmid]) && isset($s[$tmid]['qty']) ? $s[$tmid]['qty'] : $object->lines[$i_loop]->qty;
                     print '<tr class="oddeven_">';
                     print '<td class="left width300">'.$objprod_form->getNomUrl(1).'</td>';
                     print '<td class="left width300">';
                     if($hasbatch) {
                         for ($z_loop=0; $z_loop < $current_qty_val; $z_loop++) {
                             $current_batch_val = $s && isset($s[$tmid]) && isset($s[$tmid]['batch'][$z_loop]) ? $s[$tmid]['batch'][$z_loop] : '';
                             print '<input type="text" class="flat width200" name="savorders_data['.$tmid.'][batch]['.$z_loop.']" value="'.$current_batch_val.'"/>';
                         }
                     } else { print '-'; }
                     print '</td>';
                     $disabled_qty_input = ($hasbatch) ? 'disabled' : '';
                     $max_qty_attr = ($hasbatch) ? 'max="'.$current_qty_val.'"' : '';
                     print '<td class="left "><input type="number" class="flat width50" name="savorders_data['.$tmid.'][qty]" value="'.$current_qty_val.'" '.$max_qty_attr.' min="1" step="any" '.$disabled_qty_input.'/></td>';
                     if($action == 'createdelivery' || $action == 'receivedfromsupplier') {
                         print '<td class="left selectWarehouses">';
                         $formproduct_form = new FormProduct($db);
                         if (!isset($forcecombo)) { $forcecombo = 0; }
                         print $formproduct_form->selectWarehouses($current_warehouse_val, 'savorders_data['.$tmid.'][warehouse]', '', 0, 0, 0, '', 0, $forcecombo);
                         print '</td>';
                     }
                     print '</tr>';
                }
                // ... (date selection, validate/cancel buttons) ...
                print '</table>';
                print "</form>\n";
                // ... (javascript for select2, etc.) ...
                print '</div>'; // This was the duplicated div, ensure it's balanced now.
                // print '</div>'; // The main form div "savorders_formconfirm"
                print '<br>';
                // --- End of example form code ---
                return 1; // Form is displayed for non-draft SAV order
                
                    } else {
                        // SAV action form requested on a DRAFT SAV order.
                        return 0; // Let default buttons show for draft.
                    }
                } else {
                    // SAV action form requested for a non-SAV order. Invalid.
                    return 0; // Allow default buttons.
                }
            }

            // Part 2: Logic for displaying initial set of buttons on card load
            if ($savorders_sav) {
                // It's a SAV order.
                if ($order_status == Commande::STATUS_DRAFT) {
                    // DRAFT SAV Order: Allow Dolibarr's default buttons (Validate, Modify, etc.)
                    return 0; 
                } else {
                    // VALIDATED (or other non-draft) SAV Order: Display SAV-specific buttons
                    // and suppress default Dolibarr buttons (like "Create Expedition").
                    
                    // Check user rights for SAV module actions safely
                    $hasSavCreateRights = (isset($user->rights->savorders) && is_object($user->rights->savorders) && !empty($user->rights->savorders->creer));

                    if (!$hasSavCreateRights || $object->statut < 1) { // $object->statut < 1 might be redundant due to DRAFT check already done
                        // No rights or status too early, but it's a non-draft SAV order, so suppress defaults.
                    } else {
                        // User has rights and status is appropriate, proceed to display SAV buttons
                        $nblines = count($object->lines);
                        $savorders_status_extra = isset($object->array_options["options_savorders_status"]) ? $object->array_options["options_savorders_status"] : null;
                        // $linktogo is already defined above

                        if ($nblines > 0) { // Only show SAV buttons if there are lines
                            print '<div class="inline-block divButAction">';
                            if ($object->element == 'order_supplier') {
                                // Supplier order SAV buttons
                                if (empty($savorders_status_extra)) {
                                    print '<a id="savorders_button" class="savorders butAction badge-status1" href="'.$linktogo.'&action=deliveredtosupplier&token='.newToken().'">' . $langs->trans('ProductDeliveredToSupplier') . '</a>';
                                } elseif ($savorders_status_extra == savorders::DELIVERED_SUPPLIER) {
                                    print '<a id="savorders_button" class="savorders butAction badge-status1" href="'.$linktogo.'&action=receivedfromsupplier&token='.newToken().'">' . $langs->trans('ProductReceivedFromSupplier') . '</a>';
                                }
                            } else { // Customer order SAV buttons
                                if (empty($savorders_status_extra)) {
                                    print '<a id="savorders_button" class="savorders butAction badge-status1" href="'.$linktogo.'&action=receiptofproduct&token='.newToken().'">' . $langs->trans('ProductReceivedFromCustomer') . '</a>';
                                } elseif ($savorders_status_extra == savorders::RECIEVED_CUSTOMER) {
                                    print '<a id="savorders_button" class="savorders butAction badge-status1" href="'.$linktogo.'&action=createdelivery&token='.newToken().'">' . $langs->trans('ProductDeliveredToCustomer') . '</a>';
                                }
                            }
                            print '</div>';
                        }
                    }
                    return 1; // Suppress default Dolibarr buttons for non-draft SAV orders.
                }
            } else {
                // It's NOT a SAV order. Allow Dolibarr to display its default buttons.
                return 0; 
            }
        } // End of context check

        return 0; // Default return if not in the correct context
    }
}